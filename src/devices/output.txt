12a13,15
> // Used for BSD scheduler
> #define RECALC_FREQ 4
> 
20,21c23,24
< /* List: List of the sleeping threads */
< static struct list sleeping_list;
---
> /* List of processes sleeping */
> static struct list sleep_list;
42a46
>   list_init(&sleep_list);
93c97
< timer_sleep (int64_t ticks) 
---
> timer_sleep (int64_t ticks)
95,97d98
<   //must turn interrupts off before calling thread_block()
<   //int old_intr_level = intr_disable();
< 
99,102c100,107
<   if (ticks <= 0) return;
< 
< 
<   //initing intr_lvl to keep track of the older labels
---
>   if (ticks <= 0)
>     {
>       return;
>     }
>   /* Turn interrupts off temporarily to:
>      - calculate ticks to stop sleep
>      - add thread to sleep list
>      - block thread */
104,109d108
<  
<   // Algorithm: 
<   // Turn interrupts off temporarily to:
<   // - calculate ticks to stop sleep
<   // - add thread to sleep list
<   // - block thread
111,116c110,111
<   
<   list_insert_ordered(&sleeping_list, &thread_current()->elem,
<                      (list_less_func *) &cmp_ticks, NULL);
< 
<   //each thread needs to be set to the list, then slept.
<   //each thread has a level that also needs to be handled.
---
>   list_insert_ordered(&sleep_list, &thread_current()->elem,
> 		      (list_less_func *) &cmp_ticks, NULL);
189a185
> 
198,200c194
<   //Starts with the sleeping list.
<   struct list_elem *element = list_begin(&sleeping_list);
<   while (element != list_end(&sleeping_list))
---
>   if (thread_mlfqs)
202,212c196,206
<       struct thread *t1 = list_entry(element, struct thread, elem);
<       if (ticks < t1->ticks)
<         {
<           break;
<         }
< 
<       list_remove(element); // remove from the sleeping list
< 
<       thread_unblock(t1); // Unblock and add to ready list
< 
<       element = list_begin(&sleeping_list);
---
>       mlfqs_increment();
>       if (ticks % TIMER_FREQ == 0)
> 	{
> 	  mlfqs_load_avg();
> 	  mlfqs_recalc(); // Recalcs recent_cpu and priority
> 	}
>       if (ticks % RECALC_FREQ == 0)
> 	{
> 	  mlfqs_priority(thread_current());
> 	}
>     }
213a208,218
>   struct list_elem *e = list_begin(&sleep_list);
>   while (e != list_end(&sleep_list))
>     {
>       struct thread *t = list_entry(e, struct thread, elem);      
>       if (ticks < t->ticks)
> 	{
> 	  break;
> 	}
>       list_remove(e); // remove from sleep list
>       thread_unblock(t); // Unblock and add to ready list
>       e = list_begin(&sleep_list);
215d219
<   //idk if i need this
217d220
< 
